import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.IntStream;

/*
record Item(long itemNum, String name, int price) {}

class Order implements Cloneable, Comparable<Order>{
	private long orderNum;
	private Item[] items;
	public Order(long orderNum) {
		this.orderNum=orderNum;
	}
	public void setItems(Item... items) {
		this.items=items;
	}
	public int totalPrice() {
		return IntStream.of(items[0].price()).sum();
	}
	@Override public int compareTo(Order other) {
		return (int)(orderNum-other.orderNum);
	}
	@Override public boolean equals(Object o){
		if(o==null||getClass()!=o.getClass()) return false;
		if(this==o) return true;
		Order od = (Order)o;
		return orderNum==od.orderNum && Arrays.equals(items, od.items);
	}
	@Override public Order clone() throws CloneNotSupportedException{
		Order cloned = (Order)super.clone();
		return cloned;
	}
	public static <T> void sort(T[] a, Comparator<? super T> c) {
		System.out.println("success!");
	}
}
class RocketOrder extends Order{
	private long deliveryNum;
	public RocketOrder(long orderNum, long deliveryNum) {
		super(orderNum);
		this.deliveryNum=deliveryNum;
	}
	@Override public int compareTo(Order o) {
		return 0;
	}
	@Override public boolean equals(Object o){
		if(!super.equals(o)) return false;
		RocketOrder ro = (RocketOrder)o;
		return deliveryNum==ro.deliveryNum;
	}
	@Override public RocketOrder clone() {
		RocketOrder cloned = null;
		try {
			cloned = (RocketOrder)super.clone();
		}
		catch(CloneNotSupportedException e) {}
		return cloned;
	}
}
public class TestMain {
	public static void main(String[] args) {
		Order first = new Order(10);
		Item item1 = new Item(1, "shoes", 10_000);
		first.setItems(item1);
		System.out.println(first.totalPrice());
	}
}*/

public class TestMain {
	public enum Weapon{
		Mjolnir(20,5), CapShield(10,5), 
		StormBreaker(20,10), YakaArrow(15,5);
		public final int AttackPower;
		public final int DefensePower;
		private Weapon(int attackPower, int defensePower) {
			this.AttackPower = attackPower;
			this.DefensePower = defensePower;
		}
		public boolean hasSpecialAttack() {
			Weapon[] weapons = Weapon.values();
			return weapons[this.ordinal()]==Mjolnir? true: false;
			//return this.ordinal()==Mjolnir.ordinal()? true: false;
		}
	}
	public static void main(String[] args) {
		
	}
}